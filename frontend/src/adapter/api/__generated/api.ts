/* tslint:disable */
/* eslint-disable */
/**
 * leagueoflegeds
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {assertParamExists, createRequestFunction, DUMMY_BASE_URL, serializeDataIfNeeded, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, toPathString} from './common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 *
 * @export
 * @interface Ban
 */
export interface Ban {
    /**
     *
     * @type {number}
     * @memberof Ban
     */
    'championId'?: number;
}

/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    'text': string;
    /**
     *
     * @type {User}
     * @memberof Comment
     */
    'owner'?: User;
}

/**
 * Evaluation for a Match
 * @export
 * @interface Evaluation
 */
export interface Evaluation {
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    'summonerName'?: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    'tag'?: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    'feedback'?: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    'lane'?: string;
}

/**
 *
 * @export
 * @interface EvaluationAddEvaluationPutRequest
 */
export interface EvaluationAddEvaluationPutRequest {
    /**
     *
     * @type {string}
     * @memberof EvaluationAddEvaluationPutRequest
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof EvaluationAddEvaluationPutRequest
     */
    'matchId'?: string;
    /**
     *
     * @type {string}
     * @memberof EvaluationAddEvaluationPutRequest
     */
    'summonerName'?: string;
}

/**
 *
 * @export
 * @interface Follower
 */
export interface Follower {
    /**
     *
     * @type {string}
     * @memberof Follower
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Follower
     */
    'followerName'?: string;
    /**
     *
     * @type {string}
     * @memberof Follower
     */
    'region'?: string;
    /**
     *
     * @type {number}
     * @memberof Follower
     */
    'profileIconId'?: number;
    /**
     *
     * @type {Array<User>}
     * @memberof Follower
     */
    'users'?: Array<User>;
}

/**
 *
 * @export
 * @interface FollowerAllOf
 */
export interface FollowerAllOf {
    /**
     *
     * @type {string}
     * @memberof FollowerAllOf
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof FollowerAllOf
     */
    'followerName'?: string;
    /**
     *
     * @type {string}
     * @memberof FollowerAllOf
     */
    'region'?: string;
    /**
     *
     * @type {number}
     * @memberof FollowerAllOf
     */
    'profileIconId'?: number;
    /**
     *
     * @type {Array<User>}
     * @memberof FollowerAllOf
     */
    'users'?: Array<User>;
}

/**
 *
 * @export
 * @interface GetGuidecomments200Response
 */
export interface GetGuidecomments200Response {
    /**
     *
     * @type {Array<Comment>}
     * @memberof GetGuidecomments200Response
     */
    ''?: Array<Comment>;
}

/**
 *
 * @export
 * @interface Guide
 */
export interface Guide {
    /**
     *
     * @type {string}
     * @memberof Guide
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Guide
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Guide
     */
    'text': string;
    /**
     *
     * @type {Array<Comment>}
     * @memberof Guide
     */
    'comments': Array<Comment>;
    /**
     *
     * @type {User}
     * @memberof Guide
     */
    'creator': User;
}

/**
 *
 * @export
 * @interface Match
 */
export interface Match {
    /**
     *
     * @type {string}
     * @memberof Match
     */
    'id': string;
    /**
     *
     * @type {Array<Evaluation>}
     * @memberof Match
     */
    'evaluations'?: Array<Evaluation>;
}

/**
 *
 * @export
 * @interface MatchAllOf
 */
export interface MatchAllOf {
    /**
     *
     * @type {string}
     * @memberof MatchAllOf
     */
    'id': string;
    /**
     *
     * @type {Array<Evaluation>}
     * @memberof MatchAllOf
     */
    'evaluations'?: Array<Evaluation>;
}

/**
 *
 * @export
 * @interface MatchData
 */
export interface MatchData {
    /**
     *
     * @type {string}
     * @memberof MatchData
     */
    'matchId'?: string;
    /**
     *
     * @type {string}
     * @memberof MatchData
     */
    'gameDuration'?: string;
    /**
     *
     * @type {Array<Participant>}
     * @memberof MatchData
     */
    'participants'?: Array<Participant>;
    /**
     *
     * @type {Array<Team>}
     * @memberof MatchData
     */
    'teams'?: Array<Team>;
    /**
     *
     * @type {string}
     * @memberof MatchData
     */
    'gameCreation'?: string;
}

/**
 *
 * @export
 * @interface MatchDataAllOf
 */
export interface MatchDataAllOf {
    /**
     *
     * @type {string}
     * @memberof MatchDataAllOf
     */
    'matchId'?: string;
    /**
     *
     * @type {string}
     * @memberof MatchDataAllOf
     */
    'gameDuration'?: string;
    /**
     *
     * @type {Array<Participant>}
     * @memberof MatchDataAllOf
     */
    'participants'?: Array<Participant>;
    /**
     *
     * @type {Array<Team>}
     * @memberof MatchDataAllOf
     */
    'teams'?: Array<Team>;
    /**
     *
     * @type {string}
     * @memberof MatchDataAllOf
     */
    'gameCreation'?: string;
}

/**
 * Evaluation for a Match
 * @export
 * @interface OpenapispecEvaluation
 */
export interface OpenapispecEvaluation {
    /**
     *
     * @type {string}
     * @memberof OpenapispecEvaluation
     */
    'summonerName'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenapispecEvaluation
     */
    'tag'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenapispecEvaluation
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenapispecEvaluation
     */
    'feedback'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenapispecEvaluation
     */
    'lane'?: string;
}

/**
 *
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'summonerName'?: string;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'teamId'?: number;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'teamPosition'?: string;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'championName'?: string;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'kills'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'assists'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'deaths'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item0'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item1'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item2'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item3'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item4'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item5'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'item6'?: number;
    /**
     *
     * @type {boolean}
     * @memberof Participant
     */
    'win'?: boolean;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'totalDamageDealtToChampions'?: number;
    /**
     *
     * @type {number}
     * @memberof Participant
     */
    'totalMinionsKilled'?: number;
}

/**
 *
 * @export
 * @interface ParticipantAllOf
 */
export interface ParticipantAllOf {
    /**
     *
     * @type {string}
     * @memberof ParticipantAllOf
     */
    'summonerName'?: string;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'teamId'?: number;
    /**
     *
     * @type {string}
     * @memberof ParticipantAllOf
     */
    'teamPosition'?: string;
    /**
     *
     * @type {string}
     * @memberof ParticipantAllOf
     */
    'championName'?: string;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'kills'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'assists'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'deaths'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item0'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item1'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item2'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item3'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item4'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item5'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'item6'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ParticipantAllOf
     */
    'win'?: boolean;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'totalDamageDealtToChampions'?: number;
    /**
     *
     * @type {number}
     * @memberof ParticipantAllOf
     */
    'totalMinionsKilled'?: number;
}

/**
 *
 * @export
 * @interface PostAuthLogin200Response
 */
export interface PostAuthLogin200Response {
    /**
     *
     * @type {User}
     * @memberof PostAuthLogin200Response
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface PostAuthLoginRequest
 */
export interface PostAuthLoginRequest {
    /**
     *
     * @type {string}
     * @memberof PostAuthLoginRequest
     */
    'userName': string;
    /**
     *
     * @type {string}
     * @memberof PostAuthLoginRequest
     */
    'password': string;
}

/**
 *
 * @export
 * @interface PostAuthRegisterRequest
 */
export interface PostAuthRegisterRequest {
    /**
     *
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'userName': string;
    /**
     *
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'summonerName': string;
    /**
     *
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'region': string;
}

/**
 *
 * @export
 * @interface PostFollowerRequest
 */
export interface PostFollowerRequest {
    /**
     *
     * @type {string}
     * @memberof PostFollowerRequest
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof PostFollowerRequest
     */
    'followerName'?: string;
    /**
     *
     * @type {string}
     * @memberof PostFollowerRequest
     */
    'region'?: string;
    /**
     *
     * @type {number}
     * @memberof PostFollowerRequest
     */
    'profileIconId'?: number;
}

/**
 *
 * @export
 * @interface PostGuidecommentsId200Response
 */
export interface PostGuidecommentsId200Response {
    /**
     *
     * @type {Comment}
     * @memberof PostGuidecommentsId200Response
     */
    ''?: Comment;
}

/**
 *
 * @export
 * @interface PostGuidecommentsIdRequest
 */
export interface PostGuidecommentsIdRequest {
    /**
     *
     * @type {string}
     * @memberof PostGuidecommentsIdRequest
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PostGuidecommentsIdRequest
     */
    'text': string;
}

/**
 *
 * @export
 * @interface PostGuidesRequest
 */
export interface PostGuidesRequest {
    /**
     *
     * @type {string}
     * @memberof PostGuidesRequest
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PostGuidesRequest
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof PostGuidesRequest
     */
    'userId': string;
}

/**
 *
 * @export
 * @interface PutGuidesIdRequest
 */
export interface PutGuidesIdRequest {
    /**
     *
     * @type {string}
     * @memberof PutGuidesIdRequest
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof PutGuidesIdRequest
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PutGuidesIdRequest
     */
    'text': string;
}

/**
 *
 * @export
 * @interface Queue
 */
export interface Queue {
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    'queueType': string;
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    'tier': string;
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    'rank': string;
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    'leaguePoints': number;
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    'wins': number;
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    'losses': number;
}

/**
 *
 * @export
 * @interface QueueAllOf
 */
export interface QueueAllOf {
    /**
     *
     * @type {string}
     * @memberof QueueAllOf
     */
    'queueType': string;
    /**
     *
     * @type {string}
     * @memberof QueueAllOf
     */
    'tier': string;
    /**
     *
     * @type {string}
     * @memberof QueueAllOf
     */
    'rank': string;
    /**
     *
     * @type {number}
     * @memberof QueueAllOf
     */
    'leaguePoints': number;
    /**
     *
     * @type {number}
     * @memberof QueueAllOf
     */
    'wins': number;
    /**
     *
     * @type {number}
     * @memberof QueueAllOf
     */
    'losses': number;
}

/**
 *
 * @export
 * @interface Summoner
 */
export interface Summoner {
    /**
     *
     * @type {string}
     * @memberof Summoner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Summoner
     */
    'puuid': string;
    /**
     *
     * @type {string}
     * @memberof Summoner
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Summoner
     */
    'region': string;
    /**
     *
     * @type {number}
     * @memberof Summoner
     */
    'profileIconId': number;
    /**
     *
     * @type {number}
     * @memberof Summoner
     */
    'summonerLevel': number;
}

/**
 *
 * @export
 * @interface SummonerAllOf
 */
export interface SummonerAllOf {
    /**
     *
     * @type {string}
     * @memberof SummonerAllOf
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SummonerAllOf
     */
    'puuid': string;
    /**
     *
     * @type {string}
     * @memberof SummonerAllOf
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SummonerAllOf
     */
    'region': string;
    /**
     *
     * @type {number}
     * @memberof SummonerAllOf
     */
    'profileIconId': number;
    /**
     *
     * @type {number}
     * @memberof SummonerAllOf
     */
    'summonerLevel': number;
}

/**
 *
 * @export
 * @interface SummonerWithQueuesMatches
 */
export interface SummonerWithQueuesMatches {
    /**
     *
     * @type {string}
     * @memberof SummonerWithQueuesMatches
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SummonerWithQueuesMatches
     */
    'puuid': string;
    /**
     *
     * @type {string}
     * @memberof SummonerWithQueuesMatches
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SummonerWithQueuesMatches
     */
    'region': string;
    /**
     *
     * @type {number}
     * @memberof SummonerWithQueuesMatches
     */
    'profileIconId': number;
    /**
     *
     * @type {number}
     * @memberof SummonerWithQueuesMatches
     */
    'summonerLevel': number;
    /**
     *
     * @type {Array<Queue>}
     * @memberof SummonerWithQueuesMatches
     */
    'queues'?: Array<Queue>;
    /**
     *
     * @type {Array<Match>}
     * @memberof SummonerWithQueuesMatches
     */
    'matches'?: Array<Match>;
}

/**
 *
 * @export
 * @interface SummonerWithQueuesMatchesAllOf
 */
export interface SummonerWithQueuesMatchesAllOf {
    /**
     *
     * @type {Array<Queue>}
     * @memberof SummonerWithQueuesMatchesAllOf
     */
    'queues'?: Array<Queue>;
    /**
     *
     * @type {Array<Match>}
     * @memberof SummonerWithQueuesMatchesAllOf
     */
    'matches'?: Array<Match>;
}

/**
 *
 * @export
 * @interface Team
 */
export interface Team {
    /**
     *
     * @type {number}
     * @memberof Team
     */
    'teamId'?: number;
    /**
     *
     * @type {Array<Ban>}
     * @memberof Team
     */
    'bans'?: Array<Ban>;
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'userName': string;
    /**
     *
     * @type {Array<Follower>}
     * @memberof User
     */
    'followers'?: Array<Follower>;
    /**
     *
     * @type {SummonerWithQueuesMatches}
     * @memberof User
     */
    'summonerName': SummonerWithQueuesMatches;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete follower from user
         * @param {string} followerId
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowerFollowerId: async (followerId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followerId' is not null or undefined
            assertParamExists('deleteFollowerFollowerId', 'followerId', followerId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteFollowerFollowerId', 'userId', userId)
            const localVarPath = `/follower/{followerId}&{userId}`
                .replace(`{${"followerId"}}`, encodeURIComponent(String(followerId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete guide with given id
         * @summary
         * @param {string} [id] guideId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuides: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add(s) Evaluation(s) for a match
         * @summary
         * @param {EvaluationAddEvaluationPutRequest} [evaluationAddEvaluationPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluationAddEvaluationPut: async (evaluationAddEvaluationPutRequest?: EvaluationAddEvaluationPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluation/addEvaluation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluationAddEvaluationPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GET evaluation for given match, region and summonerName
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluationGetEvaluationMatchGet: async (region?: string, matchId?: string, summonerName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluation/getEvaluationMatch/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (matchId !== undefined) {
                localVarQueryParameter['matchId'] = matchId;
            }

            if (summonerName !== undefined) {
                localVarQueryParameter['summonerName'] = summonerName;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get evaluation(s) for user
         * @summary Your GET endpoint
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationGetEvaluationUser: async (matchId?: string, summonerName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluation/getEvaluationUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (matchId !== undefined) {
                localVarQueryParameter['matchId'] = matchId;
            }

            if (summonerName !== undefined) {
                localVarQueryParameter['summonerName'] = summonerName;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the followers for particular user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerUser: async (userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/follower/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to get all comments
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidecomments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guidecomments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to get all guides
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuides: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a guide using an Id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGuidesId', 'id', id)
            const localVarPath = `/guides/byId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to get a all guides with the given title and userId
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesTitleTitle: async (userId?: string, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides/titleUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to get all the guides for the logged user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesUserguides: async (userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides/userguides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to get a guide with the given title from all Users
         * @summary Your GET endpoint
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesTitleAllUsersGet: async (title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides/titleAllUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * a Endpiont to login with userName and password
         * @summary
         * @param {PostAuthLoginRequest} [postAuthLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (postAuthLoginRequest?: PostAuthLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * a Endpiont to register a new user
         * @summary
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (postAuthRegisterRequest?: PostAuthRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add new follower to user
         * @summary
         * @param {PostFollowerRequest} [postFollowerRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollower: async (postFollowerRequest?: PostFollowerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/follower/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {PostGuidecommentsIdRequest} [postGuidecommentsIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGuidecommentsId: async (id: string, postGuidecommentsIdRequest?: PostGuidecommentsIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postGuidecommentsId', 'id', id)
            const localVarPath = `/guidecomments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGuidecommentsIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to add a guide to logged user
         * @summary
         * @param {PostGuidesRequest} [postGuidesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGuides: async (postGuidesRequest?: PostGuidesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGuidesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update summonerName for user
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {string} [userName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthUpdate: async (region?: string, summonerName?: string, userName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (summonerName !== undefined) {
                localVarQueryParameter['summonerName'] = summonerName;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update guide from user
         * @summary
         * @param {string} id
         * @param {PutGuidesIdRequest} [putGuidesIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGuidesId: async (id: string, putGuidesIdRequest?: PutGuidesIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putGuidesId', 'id', id)
            const localVarPath = `/guides/byId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putGuidesIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Summoner
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSummonerUpdateSummoner: async (region?: string, summonerName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/summoner/updateSummoner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (summonerName !== undefined) {
                localVarQueryParameter['summonerName'] = summonerName;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Your GET endpoint
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        riotApiGetMatchDataByIdGet: async (region?: string, matchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/riotApi/getMatchDataById/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (matchId !== undefined) {
                localVarQueryParameter['matchId'] = matchId;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        riotApiGetSummonerByNameGet: async (region?: string, summonerName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/riotApi/getSummonerByName/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (summonerName !== undefined) {
                localVarQueryParameter['summonerName'] = summonerName;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * delete follower from user
         * @param {string} followerId
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFollowerFollowerId(followerId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFollowerFollowerId(followerId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete guide with given id
         * @summary
         * @param {string} [id] guideId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGuides(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGuides(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * add(s) Evaluation(s) for a match
         * @summary
         * @param {EvaluationAddEvaluationPutRequest} [evaluationAddEvaluationPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest?: EvaluationAddEvaluationPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Match>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GET evaluation for given match, region and summonerName
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluationGetEvaluationMatchGet(region?: string, matchId?: string, summonerName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Evaluation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluationGetEvaluationMatchGet(region, matchId, summonerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get evaluation(s) for user
         * @summary Your GET endpoint
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvaluationGetEvaluationUser(matchId?: string, summonerName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Evaluation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvaluationGetEvaluationUser(matchId, summonerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the followers for particular user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowerUser(userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Follower>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowerUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to get all comments
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuidecomments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGuidecomments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuidecomments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to get all guides
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuides(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Guide>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuides(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a guide using an Id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuidesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuidesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to get a all guides with the given title and userId
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuidesTitleTitle(userId?: string, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Guide>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuidesTitleTitle(userId, title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to get all the guides for the logged user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuidesUserguides(userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Guide>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuidesUserguides(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to get a guide with the given title from all Users
         * @summary Your GET endpoint
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guidesTitleAllUsersGet(title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Guide>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guidesTitleAllUsersGet(title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * a Endpiont to login with userName and password
         * @summary
         * @param {PostAuthLoginRequest} [postAuthLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(postAuthLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * a Endpiont to register a new user
         * @summary
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(postAuthRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * add new follower to user
         * @summary
         * @param {PostFollowerRequest} [postFollowerRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFollower(postFollowerRequest?: PostFollowerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Follower>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFollower(postFollowerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {PostGuidecommentsIdRequest} [postGuidecommentsIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGuidecommentsId(id: string, postGuidecommentsIdRequest?: PostGuidecommentsIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostGuidecommentsId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGuidecommentsId(id, postGuidecommentsIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to add a guide to logged user
         * @summary
         * @param {PostGuidesRequest} [postGuidesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGuides(postGuidesRequest?: PostGuidesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGuides(postGuidesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update summonerName for user
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {string} [userName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAuthUpdate(region?: string, summonerName?: string, userName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAuthUpdate(region, summonerName, userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update guide from user
         * @summary
         * @param {string} id
         * @param {PutGuidesIdRequest} [putGuidesIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGuidesId(id: string, putGuidesIdRequest?: PutGuidesIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGuidesId(id, putGuidesIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Summoner
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSummonerUpdateSummoner(region?: string, summonerName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummonerWithQueuesMatches>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSummonerUpdateSummoner(region, summonerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Your GET endpoint
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async riotApiGetMatchDataByIdGet(region?: string, matchId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.riotApiGetMatchDataByIdGet(region, matchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async riotApiGetSummonerByNameGet(region?: string, summonerName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummonerWithQueuesMatches>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.riotApiGetSummonerByNameGet(region, summonerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * delete follower from user
         * @param {string} followerId
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowerFollowerId(followerId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFollowerFollowerId(followerId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete guide with given id
         * @summary
         * @param {string} [id] guideId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuides(id?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGuides(id, options).then((request) => request(axios, basePath));
        },
        /**
         * add(s) Evaluation(s) for a match
         * @summary
         * @param {EvaluationAddEvaluationPutRequest} [evaluationAddEvaluationPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest?: EvaluationAddEvaluationPutRequest, options?: any): AxiosPromise<Match> {
            return localVarFp.evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GET evaluation for given match, region and summonerName
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluationGetEvaluationMatchGet(region?: string, matchId?: string, summonerName?: string, options?: any): AxiosPromise<Array<Evaluation>> {
            return localVarFp.evaluationGetEvaluationMatchGet(region, matchId, summonerName, options).then((request) => request(axios, basePath));
        },
        /**
         * get evaluation(s) for user
         * @summary Your GET endpoint
         * @param {string} [matchId]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationGetEvaluationUser(matchId?: string, summonerName?: string, options?: any): AxiosPromise<Array<Evaluation>> {
            return localVarFp.getEvaluationGetEvaluationUser(matchId, summonerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the followers for particular user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerUser(userId?: string, options?: any): AxiosPromise<Array<Follower>> {
            return localVarFp.getFollowerUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to get all comments
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidecomments(options?: any): AxiosPromise<GetGuidecomments200Response> {
            return localVarFp.getGuidecomments(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to get all guides
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuides(options?: any): AxiosPromise<Array<Guide>> {
            return localVarFp.getGuides(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a guide using an Id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesId(id: string, options?: any): AxiosPromise<Guide> {
            return localVarFp.getGuidesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to get a all guides with the given title and userId
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesTitleTitle(userId?: string, title?: string, options?: any): AxiosPromise<Array<Guide>> {
            return localVarFp.getGuidesTitleTitle(userId, title, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to get all the guides for the logged user
         * @summary Your GET endpoint
         * @param {string} [userId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuidesUserguides(userId?: string, options?: any): AxiosPromise<Array<Guide>> {
            return localVarFp.getGuidesUserguides(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to get a guide with the given title from all Users
         * @summary Your GET endpoint
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesTitleAllUsersGet(title?: string, options?: any): AxiosPromise<Array<Guide>> {
            return localVarFp.guidesTitleAllUsersGet(title, options).then((request) => request(axios, basePath));
        },
        /**
         * a Endpiont to login with userName and password
         * @summary
         * @param {PostAuthLoginRequest} [postAuthLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: any): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthLogin(postAuthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * a Endpiont to register a new user
         * @summary
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: any): AxiosPromise<User> {
            return localVarFp.postAuthRegister(postAuthRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * add new follower to user
         * @summary
         * @param {PostFollowerRequest} [postFollowerRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollower(postFollowerRequest?: PostFollowerRequest, options?: any): AxiosPromise<Follower> {
            return localVarFp.postFollower(postFollowerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {PostGuidecommentsIdRequest} [postGuidecommentsIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGuidecommentsId(id: string, postGuidecommentsIdRequest?: PostGuidecommentsIdRequest, options?: any): AxiosPromise<PostGuidecommentsId200Response> {
            return localVarFp.postGuidecommentsId(id, postGuidecommentsIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to add a guide to logged user
         * @summary
         * @param {PostGuidesRequest} [postGuidesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGuides(postGuidesRequest?: PostGuidesRequest, options?: any): AxiosPromise<Guide> {
            return localVarFp.postGuides(postGuidesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * update summonerName for user
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {string} [userName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthUpdate(region?: string, summonerName?: string, userName?: string, options?: any): AxiosPromise<User> {
            return localVarFp.putAuthUpdate(region, summonerName, userName, options).then((request) => request(axios, basePath));
        },
        /**
         * update guide from user
         * @summary
         * @param {string} id
         * @param {PutGuidesIdRequest} [putGuidesIdRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGuidesId(id: string, putGuidesIdRequest?: PutGuidesIdRequest, options?: any): AxiosPromise<Guide> {
            return localVarFp.putGuidesId(id, putGuidesIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * update Summoner
         * @summary
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSummonerUpdateSummoner(region?: string, summonerName?: string, options?: any): AxiosPromise<SummonerWithQueuesMatches> {
            return localVarFp.putSummonerUpdateSummoner(region, summonerName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Your GET endpoint
         * @param {string} [region]
         * @param {string} [matchId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        riotApiGetMatchDataByIdGet(region?: string, matchId?: string, options?: any): AxiosPromise<MatchData> {
            return localVarFp.riotApiGetMatchDataByIdGet(region, matchId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [region]
         * @param {string} [summonerName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        riotApiGetSummonerByNameGet(region?: string, summonerName?: string, options?: any): AxiosPromise<SummonerWithQueuesMatches> {
            return localVarFp.riotApiGetSummonerByNameGet(region, summonerName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * delete follower from user
     * @param {string} followerId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFollowerFollowerId(followerId: string, userId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteFollowerFollowerId(followerId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete guide with given id
     * @summary
     * @param {string} [id] guideId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGuides(id?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGuides(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add(s) Evaluation(s) for a match
     * @summary
     * @param {EvaluationAddEvaluationPutRequest} [evaluationAddEvaluationPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest?: EvaluationAddEvaluationPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).evaluationAddEvaluationPut(evaluationAddEvaluationPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary GET evaluation for given match, region and summonerName
     * @param {string} [region]
     * @param {string} [matchId]
     * @param {string} [summonerName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public evaluationGetEvaluationMatchGet(region?: string, matchId?: string, summonerName?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).evaluationGetEvaluationMatchGet(region, matchId, summonerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get evaluation(s) for user
     * @summary Your GET endpoint
     * @param {string} [matchId]
     * @param {string} [summonerName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEvaluationGetEvaluationUser(matchId?: string, summonerName?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEvaluationGetEvaluationUser(matchId, summonerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the followers for particular user
     * @summary Your GET endpoint
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowerUser(userId?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFollowerUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to get all comments
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGuidecomments(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGuidecomments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to get all guides
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGuides(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGuides(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a guide using an Id
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGuidesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGuidesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to get a all guides with the given title and userId
     * @summary Your GET endpoint
     * @param {string} [userId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGuidesTitleTitle(userId?: string, title?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGuidesTitleTitle(userId, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to get all the guides for the logged user
     * @summary Your GET endpoint
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGuidesUserguides(userId?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGuidesUserguides(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to get a guide with the given title from all Users
     * @summary Your GET endpoint
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public guidesTitleAllUsersGet(title?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).guidesTitleAllUsersGet(title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * a Endpiont to login with userName and password
     * @summary
     * @param {PostAuthLoginRequest} [postAuthLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthLogin(postAuthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * a Endpiont to register a new user
     * @summary
     * @param {PostAuthRegisterRequest} [postAuthRegisterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthRegister(postAuthRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add new follower to user
     * @summary
     * @param {PostFollowerRequest} [postFollowerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFollower(postFollowerRequest?: PostFollowerRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFollower(postFollowerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary
     * @param {string} id
     * @param {PostGuidecommentsIdRequest} [postGuidecommentsIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGuidecommentsId(id: string, postGuidecommentsIdRequest?: PostGuidecommentsIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postGuidecommentsId(id, postGuidecommentsIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to add a guide to logged user
     * @summary
     * @param {PostGuidesRequest} [postGuidesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGuides(postGuidesRequest?: PostGuidesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postGuides(postGuidesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update summonerName for user
     * @summary
     * @param {string} [region]
     * @param {string} [summonerName]
     * @param {string} [userName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putAuthUpdate(region?: string, summonerName?: string, userName?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putAuthUpdate(region, summonerName, userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update guide from user
     * @summary
     * @param {string} id
     * @param {PutGuidesIdRequest} [putGuidesIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putGuidesId(id: string, putGuidesIdRequest?: PutGuidesIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putGuidesId(id, putGuidesIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Summoner
     * @summary
     * @param {string} [region]
     * @param {string} [summonerName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSummonerUpdateSummoner(region?: string, summonerName?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putSummonerUpdateSummoner(region, summonerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Your GET endpoint
     * @param {string} [region]
     * @param {string} [matchId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public riotApiGetMatchDataByIdGet(region?: string, matchId?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).riotApiGetMatchDataByIdGet(region, matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} [region]
     * @param {string} [summonerName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public riotApiGetSummonerByNameGet(region?: string, summonerName?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).riotApiGetSummonerByNameGet(region, summonerName, options).then((request) => request(this.axios, this.basePath));
    }
}


